git使用
   一、使用前配置
         在使用git前，需要告诉git你是谁，在向git仓库中提交时需要用到
            1、配置提交人姓名：git config --global user.name "提交人姓名"
            2、配置提交人邮箱：git config --global user.email "提交人邮箱"
            3、查看git配置信息git config --list
            注意：
                * 如果需要对配置信息进行修改，重复上述命令即可
                * 配置只需执行一次

   二、提交步骤
         1、git init  初始化git仓库
         2、git status  查看文件状态
         3、git add 文件列表    追踪文件
         4、git commit -m 提交信息    向仓库中提交代码
         5、git log   查看提交记录

   三、撤销
         git checkout 文件      用暂存区中的文件覆盖工作目录中的文件

         git rm --cached 文件   将文件从暂存区中删除

         git rest --hard commitID   将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录

分支   当前工作目录中代码的一份副本
   1、主分支(master)：第一次向 git 仓库中提交更新记录时自动产生的一个分支
   2、开发分支(develop)：作为开发分支，基于 master 分支创建
   3、功能分支(feature)：作为开发具体功能的分支，基于开发分支创建

   功能分支 ———> 开发分支 ———> 主分支

   一、分支命令
         1、git branch            查看分支
         2、git branch 分支名称     创建分支
         3、git checkout 分支名称   切换分支
         4、git merge 来源分支      合并分支
         5、git branch -d 分支名称  删除分支(分支被合并后才允许删除)  -D 强制删除

   二、暂时保存更改     在git中，可以暂时提取分支上所有的改动并储存，让开发人员得到一个干净的工作副本，临时转向其它工作
      使用常见：分支临时切换
         1、git stash      存储临时改动
         2、git stash pop  恢复改动

Github   多人协作开发流程
            1、A在自己的计算机中创建本地仓库
            2、A在github中创建远程仓库
            3、A将本地仓库推送到远程仓库
            4、B克隆远程仓库到本地进行开发
            5、B将本地仓库中开发的内容推送到远程仓库
            6、A将远程仓库中的最新内容拉入本地仓库

         将本地仓库推送到远程仓库
            1、git push 远程仓库地址 分支名称
            2、git push 远程仓库地址别名 分支名称
            3、git push -u 远程仓库地址别名 分支名称
                -u 记住推送地址及分支，下次推送只需要输入 git push 即可
            4、git remote add 远程仓库地址别名 远程仓库地址

         克隆仓库
            git clone 仓库地址    克隆远端数据仓库到本地

         拉取远程仓库中最新版本
            git pull 远程仓库地址 分支名称    拉取远程仓库中最新版本

解决冲突   在多人开发一个项目中，如果两个人修改了同一个地方，就会发生冲突。冲突需要人为解决

跨团队协作
         1、程序员C fork仓库
         2、程序员C 将仓库克隆在本地进行修改
         3、程序员C 将仓库推送到远程
         4、程序员C 发起pull request
         5、原作者审核
         6、原作者合并代码

ssh免登录
         1、生成密钥  ssh-keygen
         2、密钥存储目录：c:\User\用户\.ssh
            * 公钥名称：id_rsa.pub
            * 私钥名称：id_rea
         3、将公钥添加到GitHub中

Git忽略清单    将不需要被git管理的文件添加到此文件中，在执行git命令的时候，git就会忽略这些文件
         创建git忽略清单
            1、touch .gitignore
            2、编辑器打开 .gitignore 将要忽略文件名称写入其中

         git add .   及那个工作目录中的文件全部

